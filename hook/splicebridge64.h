#ifndef splicebridge64_h__
#define splicebridge64_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

#if(APILIB_64 != 0)

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Статичные размеры компонентов моста.
  */
  enum
  {
    splicebridge_instructions_size = 64, // Количество инструкций в байтах.
    splicebridge_addresstable_size = 8,  // Количество указателей в таблице адресов.
  };

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Контекст моста для вызова оригинальной процедуры.
  */
  struct splicebridge_t
  {
    unsigned char instructions[splicebridge_instructions_size]; // Данные инструкций.
    size_t        instructions_size;                            // Размер инструкций.
    void*         addresstable[splicebridge_addresstable_size]; // Данные таблицы адресов.
    size_t        addresstable_size;                            // Размер таблица адресов.
  };

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Создание контекста моста.
   *
   * Инструкции по указанному адресу последовательно переносятся на новое место.
   * Инструкции переносятся до освобождения необходимого размера памяти в байтах.
   * Инструкции зависимые от своего расположения корректируются для правильной работы.
   * В конце добавляется прыжок на первую инструкцию за пределами освобожденного участка.
   *
   * @param bridge контекст моста.
   * @param target адрес переносимых инструкций.
   * @oaram needed необходиый размер инструкций в байтах.
   *
   * @return true в случае успеха, false в случае ошибки.
  */
  bool splicebridge_create(splicebridge_t* bridge, const void* target, size_t needed);

  /**
   * Разрушение контекста моста.
   *
   * @param bridge контекст моста.
   *
   * @return true в случае успеха, false в случае ошибки.
  */
  bool splicebridge_destroy(splicebridge_t* bridge);

  /**
   * Проверка готовности к разрушению контекста моста.
   *
   * @param bridge контекст моста.
   *
   * @return true контекст готов к разрушению, false не готов к разрушению или в случае ошибки.
  */
  bool splicebridge_destroy_available(splicebridge_t* bridge);

  /**
   * Получение расположения моста.
   *
   * @param bridge контекст моста.
   *
   * @return расположение моста в случае успеха, NULL в случае ошибки.
  */
  void* splicebridge_get_location(splicebridge_t* bridge);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

#endif // #if(APILIB_64 != 0)

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // splicebridge64_h__