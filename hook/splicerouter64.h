#ifndef splicerouter_h__
#define splicerouter_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Маршрутизатор отвечает за создание маршрута через плацдарм вблизи к перехватываемой процедуре.
 *
 * # Проблема:
 *   Инструкция полноценного прыжка занимает 14 байт, а область для прыжка через хотпатч 5 байт.
 *   Перезапись 14 байт точки входа в процедуру не является безопасным и подходящим решением в 
 *   нормальных условиях работы, подходит только как запасной вариант.
 * 
 * # Решение:
 *   Близкий прыжок из хотпатч области на плацдарм вблизи к перехватываемой процедуры, через 
 *   который происходит дальнейший длинный прыжок на переключатель. Таким образом управление
 *   передается через некоторый маршрут из нескольких точек на пути от пункта "А" к пункту "Б".
*/

///////////////////////////////////////////////////////////////////////////////////////////////////

#if(APILIB_64 != 0)

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//


  /**
   * Получение адреса персонального плацдарма.
   *
   * @param from адрес из которого происходит близкий прыжок.
   * @param to   адрес на который происходит дальний прыжок.
   *
   * @return адрес плацдарма в случае успеха, NULL в случае ошибки.
  */
  void* splicerouter_get_personal(const void* from, const void* to);

  /**
   * Освобождение персонального плацдарма.
   *
   * @param address адрес плацдарма или адрес её части.
   *
   * @return true в случае успеха, false в случае ошибки.
  */
  bool splicerouter_free_personal(const void* address);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

#endif // #if(APILIB_64 != 0)

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // splicerouter_h__