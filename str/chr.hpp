#ifndef chr_hpp__
#define chr_hpp__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * [Шаблон] Является ли символ буквой или цифрой.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isalnum_ex(X c)
  {
    if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ буквой.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isalpha_ex(X c)
  {
    if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ пробелом или знаком табуляции (' ' или '\t').
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isblank_ex(X c)
  {
    if(c == ' ' || c == '\t')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ знаком возврата каретки или переноса строки ('\r' или '\n').
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isbreak_ex(X c)
  {
    if(c == '\r' || c == '\n')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ непечатаемым управляющим знаком.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __iscntrl_ex(X c)
  {
    if((c >= 0x00 && c <= 0x1F) || (c == 0x7F))return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ цифрой.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isdigit_ex(X c)
  {
    if(c >= '0' && c <= '9')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ графическим (все печатаемые символы кроме пробела).
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isgraph_ex(X c)
  {
    if(c >= 0x21 && c != 0x7F)return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ буквой в нижнем регистре.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __islower_ex(X c)
  {
    if(c >= 'a' && c <= 'z')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ печатаемым (все печатаемые символы включая пробел).
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isprint_ex(X c)
  {
    if(c >= 0x20 && c != 0x7F)return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ знаком пунктуации (графические символы кроме букв и цифр).
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __ispunct_ex(X c)
  {
    if((c >= 0x21 && c <= 0x2F) || (c >= 0x3A && c <= 0x40) || (c >= 0x5B && c <= 0x60) || (c >= 0x7B && c <= 0x7E))return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ одним из эквивалентов пробела.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isspace_ex(X c)
  {
    if(c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ буквой в верхнем регистре.
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isupper_ex(X c)
  {
    if(c >= 'A' && c <= 'Z')return(1);
    return(0);
  }

  /**
   * [Шаблон] Является ли символ HEX цифрой (цифры и буквы от 'A' до 'F' в разных регистрах).
   *
   * @param c символ.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  template<typename X>
  inline int __isxdigit_ex(X c)
  {
    if((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))return(1);
    return(0);
  }

  /**
   * [Шаблон] Конвертация английского символа в нижний регистр.
   *
   * @param c символ.
   *
   * @return  символ в нижнем регистре или символ без изменений.
  */
  template<typename X>
  inline X __tolower_ex(X c)
  {
    if(c >= 'A' && c <= 'Z')c += ('a' - 'A');
    return c;
  }

  /**
   * [Шаблон] Конвертация английского символа в верхний регистр.
   *
   * @param c символ.
   *
   * @return  символ в верхнем регистре или символ без изменений.
  */
  template<typename X>
  inline X __toupper_ex(X c)
  {
    if(c >= 'a' && c <= 'z')c -= ('a' - 'A');
    return c;
  }

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // chr_hpp__