#ifndef strenc_h__
#define strenc_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Проверка BOM заголовка UTF-8.
   *
   * @param data  данные.
   * @param size  размер данных в байтах.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  int is_utf8_bom(const void* data, size_t size);

  /**
   * Проверка BOM заголовка UTF-16.
   *
   * @param data  данные.
   * @param size  размер данных в байтах.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  int is_utf16_bom(const void* data, size_t size);

  /**
   * Проверка BOM заголовка UTF-32.
   *
   * @param data  данные.
   * @param size  размер данных в байтах.
   *
   * @return  1 - положительный результат,
   *          0 - отрицательный результат.
  */
  int is_utf32_bom(const void* data, size_t size);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode только ASCII символов.
   * Символы выходящие за пределы диапазона 0x00 - 0x7F считаются ошибкой.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstowcs_le(wchar_t* dst, size_t maxlen, const char* src);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode только ASCII символов.
   * Символы выходящие за пределы диапазона 0x00 - 0x7F считаются ошибкой.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstowcs_lne(wchar_t* dst, size_t maxlen, const char* src, size_t length);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI только ASCII символов.
   * Символы выходящие за пределы диапазона 0x00 - 0x7F считаются ошибкой.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoacs_le(char* dst, size_t maxlen, const wchar_t* src);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI только ASCII символов.
   * Символы выходящие за пределы диапазона 0x00 - 0x7F считаются ошибкой.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoacs_lne(char* dst, size_t maxlen, const wchar_t* src, size_t length);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstowcs_l(wchar_t* dst, size_t maxlen, const char* src);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstowcs_ln(wchar_t* dst, size_t maxlen, const char* src, size_t length);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoacs_l(char* dst, size_t maxlen, const wchar_t* src);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoacs_ln(char* dst, size_t maxlen, const wchar_t* src, size_t length);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку Unicode.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t ucstowcs_l(wchar_t* dst, size_t maxlen, const char* src);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку Unicode.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t ucstowcs_ln(wchar_t* dst, size_t maxlen, const char* src, size_t length);

  /**
   * Конвертация строки из кодировки Unicode в кодировку UTF-8.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoucs_l(char* dst, size_t maxlen, const wchar_t* src);

  /**
   * Конвертация строки из кодировки Unicode в кодировку UTF-8.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t wcstoucs_ln(char* dst, size_t maxlen, const wchar_t* src, size_t length);

  /**
   * Конвертация строки из кодировки ANSI в кодировку UTF-8.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstoucs_l(char* dst, size_t maxlen, const char* src);

  /**
   * Конвертация строки из кодировки ANSI в кодировку UTF-8.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t acstoucs_ln(char* dst, size_t maxlen, const char* src, size_t length);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку ANSI.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t ucstoacs_l(char* dst, size_t maxlen, const char* src);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку ANSI.
   *
   * @param dst     конечная строка.
   * @param maxlen  максимальная длина конечной строки с учетом нулевого символа.
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   *
   * @return  требуемая длина строки без учета нулевого символа,
   *          требуемая длина равная или больше maxlen означает недостаточный размер буфера,
   *          в случае ошибки (size_t)-1.
  */
  size_t ucstoacs_ln(char* dst, size_t maxlen, const char* src, size_t length);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_w(),
   *          в случае ошибки - NULL.
  */
  wchar_t* acstowcs_dup(const char* src, size_t* result);

  /**
   * Конвертация строки из кодировки ANSI в кодировку Unicode через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_w(),
   *          в случае ошибки - NULL.
  */
  wchar_t* acstowcs_dup_n(const char* src, size_t length, size_t* result);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* wcstoacs_dup(const wchar_t* src, size_t* result);

  /**
   * Конвертация строки из кодировки Unicode в кодировку ANSI через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* wcstoacs_dup_n(const wchar_t* src, size_t length, size_t* result);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку Unicode через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_w(),
   *          в случае ошибки - NULL.
  */
  wchar_t* ucstowcs_dup(const char* src, size_t* result);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку Unicode через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_w(),
   *          в случае ошибки - NULL.
  */
  wchar_t* ucstowcs_dup(const char* src, size_t length, size_t* result);

  /**
   * Конвертация строки из кодировки Unicode в кодировку UTF-8 через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* wcstoucs_dup(const wchar_t* src, size_t* result);

  /**
   * Конвертация строки из кодировки Unicode в кодировку UTF-8 через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* wcstoucs_dup_n(const wchar_t* src, size_t length, size_t* result);

  /**
   * Конвертация строки из кодировки ANSI в кодировку UTF-8 через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* acstoucs_dup(const char* src, size_t* result);

  /**
   * Конвертация строки из кодировки ANSI в кодировку UTF-8 через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* acstoucs_dup_n(const char* src, size_t length, size_t* result);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку ANSI через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* ucstoacs_dup(const char* src, size_t* result);

  /**
   * Конвертация строки из кодировки UTF-8 в кодировку ANSI через аллоцирование памяти.
   *
   * @param src     исходная строка.
   * @oaram length  длина исходной строки без учета нулевого символа.
   * @param result  длина конечной строки без учета нулевого символа, допускается NULL.
   *
   * @return  в случае успеха - строка, которую следует освободить через strfree_a(),
   *          в случае ошибки - NULL.
  */
  char* ucstoacs_dup_n(const char* src, size_t length, size_t* result);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // strenc_h__