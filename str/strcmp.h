#ifndef strcmp_h__
#define strcmp_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Сравнение двух строк.
   *
   * @param s1  первая строка.
   * @param s2  вторая строка.
   *
   * @return  ( 1) - первая строка больше второй строки,
   *          (-1) - вторая строка больше первой строки,
   *          ( 0) - строки совпадают,
   *          ( 2) - первая строка больше второй строки являющейся нулевый указателем,
   *          (-2) - вторая строка больше первой строки являющейся нулевый указателем.
  */
  int strcmp_a(const char* s1, const char* s2);
  int strcmp_w(const wchar_t* s1, const wchar_t* s2);

  /**
   * Сравнение двух строк без учета регистра английских букв.
   *
   * @param s1  первая строка.
   * @param s2  вторая строка.
   *
   * @return  ( 1) - первая строка больше второй строки,
   *          (-1) - вторая строка больше первой строки,
   *          ( 0) - строки совпадают,
   *          ( 2) - первая строка больше второй строки являющейся нулевый указателем,
   *          (-2) - вторая строка больше первой строки являющейся нулевый указателем.
  */
  int strcmp_ea(const char* s1, const char* s2);
  int strcmp_ew(const wchar_t* s1, const wchar_t* s2);

  /**
   * Сравнение двух строк.
   *
   * @param s1      первая строка.
   * @param s2      вторая строка.
   * @param maxcnt  максимальное количество сравниваемых символов.
   *
   * @return  ( 1) - первая строка больше второй строки,
   *          (-1) - вторая строка больше первой строки,
   *          ( 0) - строки совпадают,
   *          ( 2) - первая строка больше второй строки являющейся нулевый указателем,
   *          (-2) - вторая строка больше первой строки являющейся нулевый указателем.
  */
  int strcmp_na(const char* s1, const char* s2, size_t maxcnt);
  int strcmp_nw(const wchar_t* s1, const wchar_t* s2, size_t maxcnt);

  /**
   * Сравнение двух строк без учета регистра английских букв.
   *
   * @param s1      первая строка.
   * @param s2      вторая строка.
   * @param maxcnt  максимальное количество сравниваемых символов.
   *
   * @return  ( 1) - первая строка больше второй строки,
   *          (-1) - вторая строка больше первой строки,
   *          ( 0) - строки совпадают,
   *          ( 2) - первая строка больше второй строки являющейся нулевый указателем,
   *          (-2) - вторая строка больше первой строки являющейся нулевый указателем.
  */
  int strcmp_ena(const char* s1, const char* s2, size_t maxcnt);
  int strcmp_enw(const wchar_t* s1, const wchar_t* s2, size_t maxcnt);

  /**
   * Проверка идентичности строк.
   *
   * @param s1  первая строка.
   * @param s2  вторая строка.
   *
   * @return  true  - строки идентичны,
   *          false - строки отличаются.
  */
  bool strequ_a(const char* s1, const char* s2);
  bool strequ_w(const wchar_t* s1, const wchar_t* s2);

  /**
   * Проверка идентичности строк без учета регистра английских букв.
   *
   * @param s1  первая строка.
   * @param s2  вторая строка.
   *
   * @return  true  - строки идентичны,
   *          false - строки отличаются.
  */
  bool strequ_na(const char* s1, const char* s2, size_t maxcnt);
  bool strequ_nw(const wchar_t* s1, const wchar_t* s2, size_t maxcnt);

  /**
   * Проверка идентичности строк.
   *
   * @param s1      первая строка.
   * @param s2      вторая строка.
   * @param maxcnt  максимальное количество сравниваемых символов.
   *
   * @return  true  - строки идентичны,
   *          false - строки отличаются.
  */
  bool strequ_ea(const char* s1, const char* s2);
  bool strequ_ew(const wchar_t* s1, const wchar_t* s2);

  /**
   * Проверка идентичности строк без учета регистра английских букв.
   *
   * @param s1      первая строка.
   * @param s2      вторая строка.
   * @param maxcnt  максимальное количество сравниваемых символов.
   *
   * @return  true  - строки идентичны,
   *          false - строки отличаются.
  */
  bool strequ_ena(const char* s1, const char* s2, size_t maxcnt);
  bool strequ_enw(const wchar_t* s1, const wchar_t* s2, size_t maxcnt);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // strcmp_h__