#ifndef strtrim_h__
#define strtrim_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Экранирование слешами символов ", ', \  в строке.
   *
   * @param string  строка.
   *
   * @return  в случае успеха - длина модифицрованной строки без учета нулевого символа,
   *          в случае ошибки - 0.
  */
  size_t addslashes_a(char* string);
  size_t addslashes_w(wchar_t* string);

  /**
   * Экранирование слешами символов ", ', \  в строке.
   *
   * @param string  строка.
   * @param maxlen  максимальная длина строки с учетом нулевого символа.
   *
   * @return  требуемая длина строки в символах без учета нулевого символа,
   *          требуемая длина >= maxlen означает недостаточный размер буфера,
   *          в случае ошибки 0.
  */
  size_t addslashes_la(char* string, size_t maxlen);
  size_t addslashes_lw(wchar_t* string, size_t maxlen);

  /**
   * Удаление символов '\r','\n','\t',' ' из начала и конца строки.
   *
   * @param string  строка.
   *
   * @return  в случае успеха - длина модифицированной строки без учета нулевого символа,
   *          в случае ошибки - 0.
  */
  size_t strtrim_a(char* string);
  size_t strtrim_w(wchar_t* string);

  /**
   * Удаление символов '\r','\n','\t',' ' из начала и конца строки.
   *
   * @param string  строка.
   * @param maxcnt  максимальная длина строки без учета нулевого символа.
   *
   * @return  в случае успеха - длина модифицированной строки без учета нулевого символа,
   *          в случае ошибки - 0.
   */
  size_t strtrim_na(char* string, size_t maxcnt);
  size_t strtrim_nw(wchar_t* string, size_t maxcnt);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // strtrim_h__