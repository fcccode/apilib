#ifndef memsearch_h__
#define memsearch_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
  
  /**
   * Поиск значения типа 'char'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  char* memsearch_char(const void* data, size_t size, char value);

  /**
   * Поиск значения типа 'unsigned char'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  unsigned char* memsearch_uchar(const void* data, size_t size, unsigned char value);

  /**
   * Поиск значения типа 'short'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  short* memsearch_short(const void* data, size_t size, short value);

  /**
   * Поиск значения типа 'unsigned short'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  unsigned short* memsearch_ushort(const void* data, size_t size, unsigned short value);

  /**
   * Поиск значения типа 'long'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  long* memsearch_long(const void* data, size_t size, long value);
  
  /**
   * Поиск значения типа 'unsigned long'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  unsigned long* memsearch_ulong(const void* data, size_t size, unsigned long value);

  /**
   * Поиск значения типа 'long long'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  long long* memsearch_longlong(const void* data, size_t size, long long value);

  /**
   * Поиск значения типа 'unsigned long long'.
   *
   * Поиск выполняется с шагом в 1 байт.
   * Поиск выполняется до первого совпадения.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение для поиска.
   *
   * @return найденное значение в случае успеха,
   *         NULL если значение не найдено или произошла ошибка.
  */
  unsigned long long* memsearch_ulonglong(const void* data, size_t size, unsigned long long value);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // memsearch_h__