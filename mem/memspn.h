#ifndef memspn_h__
#define memspn_h__

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace apilib
{
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

  /**
   * Количество значений 'char' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_char(const void* data, size_t size, char value);

  /**
   * Количество значений 'unsigned char' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_uchar(const void* data, size_t size, unsigned char value);

  /**
   * Количество значений 'short' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_short(const void* data, size_t size, short value);

  /**
   * Количество значений 'unsigned short' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_ushort(const void* data, size_t size, unsigned short value);

  /**
   * Количество значений 'long int' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return  количество значений подряд в случае успеха,
   *          0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_long(const void* data, size_t size, long int value);

  /**
   * Количество значений 'unsigned long int' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_ulong(const void* data, size_t size, unsigned long value);

  /**
   * Количество значений 'long long int' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_longlong(const void* data, size_t size, long long value);

  /**
   * Количество значений 'unsigned long long int' присутствующих в памяти подряд от начала данных.
   *
   * @param data  данные.
   * @param size  размер данных.
   * @param value значение.
   *
   * @return количество значений подряд в случае успеха,
   *         0 если значений не найдено или произошла ошибка.
  */
  size_t memspn_ulonglong(const void* data, size_t size, unsigned long long value);

  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
};

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // memspn_h__